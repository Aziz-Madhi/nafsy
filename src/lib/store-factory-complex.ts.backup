/**
 * Generic Store Factory with MMKV Persistence
 * Replaces duplicate store patterns across the app
 */

import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import { mmkvStorage } from './mmkv-storage';

/**
 * Base store state for all stores
 */
interface BaseStoreState {
  // Loading and error states
  isLoading: boolean;
  error: string | null;
  lastUpdated: number;
  
  // Hydration state
  _hasHydrated: boolean;
}

/**
 * Base store actions available to all stores
 */
interface BaseStoreActions {
  // Loading state management
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  
  // Utility actions
  reset: () => void;
  touch: () => void; // Update lastUpdated timestamp
  
  // Hydration management
  setHasHydrated: (hydrated: boolean) => void;
}

/**
 * Store configuration for the factory
 */
interface StoreConfig<T> {
  name: string;
  initialState: Omit<T, keyof BaseStoreState>;
  actions: (set: any, get: any) => Omit<T, keyof BaseStoreState | keyof BaseStoreActions>;
  persist?: boolean;
  version?: number;
}

/**
 * Generic store type combining state and actions
 */
type Store<T> = T & BaseStoreState & BaseStoreActions;

/**
 * Create a persisted store with common patterns
 */
export function createPersistedStore<T extends Record<string, any>>(
  config: StoreConfig<T>
) {
  
  const baseState: BaseStoreState = {
    isLoading: false,
    error: null,
    lastUpdated: Date.now(),
    _hasHydrated: false,
  };

  const baseActions = (set: any, get: any): BaseStoreActions => ({
    setLoading: (loading: boolean) => 
      set({ isLoading: loading }),
    
    setError: (error: string | null) => 
      set({ error, isLoading: false }),
    
    reset: () => {
      const initialState = {
        ...baseState,
        ...config.initialState,
        _hasHydrated: true, // Preserve hydration state
      };
      set(initialState);
    },
    
    touch: () => 
      set({ lastUpdated: Date.now() }),
    
    setHasHydrated: (hydrated: boolean) => 
      set({ _hasHydrated: hydrated }),
  });

  const storeCreator = (set: any, get: any) => ({
    ...baseState,
    ...config.initialState,
    ...baseActions(set, get),
    ...config.actions(set, get),
  });

  if (config.persist !== false) {
    return create<Store<T>>()(
      persist(
        storeCreator,
        {
          name: config.name,
          storage: createJSONStorage(() => mmkvStorage),
          version: config.version || 1,
          onRehydrateStorage: () => (state) => {
            state?.setHasHydrated?.(true);
          },
        }
      )
    );
  }

  return create<Store<T>>()(storeCreator);
}

/**
 * Async action wrapper with automatic loading/error handling
 */
export function createAsyncAction<T, Args extends any[]>(
  action: (...args: Args) => Promise<T>
) {
  return (set: any) => async (...args: Args): Promise<T | null> => {
    try {
      set({ isLoading: true, error: null });
      const result = await action(...args);
      set({ isLoading: false, lastUpdated: Date.now() });
      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      set({ isLoading: false, error: errorMessage });
      return null;
    }
  };
}

/**
 * Create selectors for a store (reduces boilerplate)
 */
export function createSelectors<T>(store: any) {
  const selectors = {} as any;
  
  Object.keys(store.getState()).forEach((key) => {
    selectors[`use${key.charAt(0).toUpperCase()}${key.slice(1)}`] = () =>
      store((state: T) => (state as any)[key]);
  });
  
  return selectors;
}

/**
 * Store types for common patterns
 */
export type AsyncState<T> = {
  data: T | null;
  isLoading: boolean;
  error: string | null;
};

export type PaginatedState<T> = AsyncState<T[]> & {
  hasMore: boolean;
  page: number;
  limit: number;
};

/**
 * Pre-configured store creators for common patterns
 */
export const createAsyncStore = <T>(name: string, fetcher: () => Promise<T>) =>
  createPersistedStore({
    name,
    initialState: {
      data: null as T | null,
    },
    actions: (set, get) => ({
      fetch: createAsyncAction(async () => {
        const data = await fetcher();
        set({ data });
        return data;
      })(set),
      
      setData: (data: T | null) => set({ data }),
      
      clearData: () => set({ data: null }),
    }),
  });

export const createListStore = <T>(name: string) =>
  createPersistedStore({
    name,
    initialState: {
      items: [] as T[],
      selectedId: null as string | null,
    },
    actions: (set, get) => ({
      addItem: (item: T) => {
        const { items } = get();
        set({ items: [...items, item] });
      },
      
      removeItem: (id: string) => {
        const { items } = get();
        set({ items: items.filter((item: any) => item.id !== id) });
      },
      
      updateItem: (id: string, updates: Partial<T>) => {
        const { items } = get();
        set({
          items: items.map((item: any) =>
            item.id === id ? { ...item, ...updates } : item
          ),
        });
      },
      
      setSelectedId: (id: string | null) => set({ selectedId: id }),
      
      getSelectedItem: (): T | null => {
        const { items, selectedId } = get();
        return items.find((item: any) => item.id === selectedId) || null;
      },
    }),
  });